/* eslint-disable */
/* REGENERATE THIS FILE BY RUNNING > bin/rails graphql:create_graphql_schema && yarn run graphql:updateTypes */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  signin?: Maybe<SigninPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationSigninArgs = {
  input: SigninInput;
};

export type Query = {
  __typename?: 'Query';
  /** An example field added by the generator */
  testField: Scalars['String'];
};

/** Autogenerated input type of Signin */
export type SigninInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  emailAddress: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of Signin */
export type SigninPayload = {
  __typename?: 'SigninPayload';
  authToken: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type SigninMutationMutationVariables = Exact<{
  emailAddress: Scalars['String'];
  password: Scalars['String'];
}>;


export type SigninMutationMutation = (
  { __typename?: 'Mutation' }
  & { signin?: Maybe<(
    { __typename?: 'SigninPayload' }
    & Pick<SigninPayload, 'authToken'>
  )> }
);

export type Unnamed_1_QueryVariables = Exact<{ [key: string]: never; }>;


export type Unnamed_1_Query = (
  { __typename?: 'Query' }
  & Pick<Query, 'testField'>
);


export const SigninMutationDocument = gql`
    mutation SigninMutation($emailAddress: String!, $password: String!) {
  signin(input: {emailAddress: $emailAddress, password: $password}) {
    authToken
  }
}
    `;
export type SigninMutationMutationFn = Apollo.MutationFunction<SigninMutationMutation, SigninMutationMutationVariables>;

/**
 * __useSigninMutationMutation__
 *
 * To run a mutation, you first call `useSigninMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSigninMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signinMutationMutation, { data, loading, error }] = useSigninMutationMutation({
 *   variables: {
 *      emailAddress: // value for 'emailAddress'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSigninMutationMutation(baseOptions?: Apollo.MutationHookOptions<SigninMutationMutation, SigninMutationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SigninMutationMutation, SigninMutationMutationVariables>(SigninMutationDocument, options);
      }
export type SigninMutationMutationHookResult = ReturnType<typeof useSigninMutationMutation>;
export type SigninMutationMutationResult = Apollo.MutationResult<SigninMutationMutation>;
export type SigninMutationMutationOptions = Apollo.BaseMutationOptions<SigninMutationMutation, SigninMutationMutationVariables>;
export const Document = gql`
    {
  testField
}
    `;

/**
 * __useQuery__
 *
 * To run a query within a React component, call `useQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuery({
 *   variables: {
 *   },
 * });
 */
export function useQuery(baseOptions?: Apollo.QueryHookOptions<Query, QueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Query, QueryVariables>(Document, options);
      }
export function useLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Query, QueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Query, QueryVariables>(Document, options);
        }
export type QueryHookResult = ReturnType<typeof useQuery>;
export type LazyQueryHookResult = ReturnType<typeof useLazyQuery>;
export type QueryResult = Apollo.QueryResult<Query, QueryVariables>;

      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {}
};
      export default result;
    